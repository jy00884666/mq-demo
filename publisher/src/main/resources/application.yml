server:
  port: 8081

spring:
  rabbitmq:
    # Windows上安装完成默认路径 127.0.0.1
    host: localhost
    # Windows上安装完成默认端口 5672
    port: 5672
    # 链接的虚拟主机
    virtual-host: /
    # 用户名
    username: guest
    # 密码
    password: guest
    #  * 如何处理生产者的确认消息?
    #  * 生产者确认需要额外的网络和系统资源开销,尽量不要使用,实际测试开启发送消息确认功能后性能降低了九成
    #  * 如果一定要使用，无需开启Publisher-Return机制，因为一般路由失败是自己业务问题
    #  * 对于nack消息可以有限次数重试，依然失败则记录异常消息
    # 开启消息生产者消息发送确认机制,消息到达交换机以后有一个回调,这里有三种类型 none-关闭确认机制, simple-同步阻塞等待MQ回执消息, correlated-MQ异步回调方式回执消息
    publisher-confirm-type: correlated
    # 消息到达消息队列回调(如果消息没有成功到达队列,会触发回调方法)
    publisher-returns: true
    # 设置MQ超时连接时间
    connection-timeout: 1s # 连接超过1秒算超时
    # 由于网络原因会出现客户端连接MQ失败的情况,通过配置开启连接失败后重连机制,是阻塞式重连
    template:
      # 这里的超时重发是指连接MQ失败的超时,并不是生产者发送消息超时重连
      retry:
        enabled: true # 开启重发机制
        initial-interval: 1000ms # 失败后的初始等待时间,间隔 1秒
        max-attempts: 6 # 最大重发次数,最多发6次
        multiplier: 1 # 失败后下次等待时长倍数,每次等待时长 = initial-interval * multiplier
        max-interval: 10000ms #每次最大间隔时间
      # 设置Mandatory:true当你发布一条消息到一个没有任何消费者监听的队列时，默认情况下，RabbitMQ 会丢弃这条消息并且不通知生产者。如果你将 mandatory 参数设置为 true，那么当 RabbitMQ 尝试发送消息到一个无人监听的队列时，会将这条消息返回给发送者，而不是丢弃。
      # 消息无法路由。报错：NO_ROUTE,需要配置Spring提供的消息发送者失败回调方法setApplicationContext(ApplicationContext applicationContext)
      mandatory: false



rabbitmq:
  # 无交换机模式:直接发送到queue1消息队列
  queueName1: queue1
  # 广播式交换机:Fanout会将消息路由到每个绑定的队列中
  fanoutExchange1: fanoutExchange1
  # 指定式交换机:Direct会将消息路由到指定的RoutingKey绑定的队列中
  fanoutExchange2: fanoutExchange2
  # 通配符交换机:TopicExchange与Direct类似,区别在于routingKey可以是多个单词列表用.分割,Queue与Exchange绑定BingKey时可以使用通配符,#表示0个或多个单词,*表示一个单词
  fanoutExchange3: fanoutExchange3
  # 交换机4:绑定queue7:RoutingKey[object.pojo]
  fanoutExchange4: fanoutExchange4
  # 交换机5:绑定queue8:RoutingKey[confirmCallback]
  fanoutExchange5: fanoutExchange5
  # 交换机6:测试消费者消息处理异常重试机制,会固定抛出异常到达消费者本地重试上线然后发送到 fanoutExchange7:error.direct 交换机统一处理消息
  fanoutExchange6: fanoutExchange6
  # 交换机8:延迟交换机:需要安装RabbitMQ提供的延迟交换机插件
  fanoutExchange8: fanoutExchange8

  queue:
    # 处理queue5{RoutingKey[china.#]}队列的消息
    routingkey5: "china.#"
    # 处理queue6{RoutingKey[#.news]}队列的消息
    routingkey6: "#.news"
    # queue7的Routingkey
    routingkey7: object.pojo
    # queue8的Routingkey
    routingkey8: confirmCallback
    # queue9的Routingkey
    routingkey9: repetition
    # queue11的RoutingKey,绑定延迟交换机与消息队列的RoutingKey:需要安装RabbitMQ提供的延迟交换机插件
    routingkey11: fanoutExchange8.queue11.delay



